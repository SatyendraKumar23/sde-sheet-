class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>>ans=new ArrayList<>();
        findcombinations(candidates,target,ans,new ArrayList<>(),0);
        return ans;
        
    }
    public static void findcombinations(int candidates[],int target,List<List<Integer>>ans,List<Integer>ds,int idx)
    {
        if(idx==candidates.length)
        {
            if(target==0)
            {
                ans.add(new ArrayList<>(ds));
            }
           
                return;
           
        }
        if(candidates[idx] <= target)
        {
            ds.add(candidates[idx]);
            findcombinations(candidates,target-candidates[idx],ans,ds,idx);
            ds.remove(ds.size()-1);

        }
        
            findcombinations(candidates,target,ans,ds,idx+1);
        
    }
}
